<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>My Store</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  </head>
  <body>
    <div id="root"></div>
    <script type="text/babel">
      const { useState } = React;
      const {useRef} = React;
      const {useEffect} = React;

function Rating ({rating}) {
  const maxRating = 5;
  return (
    <div>
         {[...Array(maxRating)].map((_, i) => (
           <span key={i}>{i < rating ? '★' : '☆'}</span>
         ))}
       </div>
     );
   }

function CounterNav({itemId, quantity, onQuantityChange, onDelete}) {

  const [inputValue, setInputValue] = useState(quantity.toString());

  React.useEffect(() => {
     setInputValue(quantity.toString());
   }, [quantity]);

  function confirmAndDelete() {
    if (confirm("Are you sure you want to delete this item?")) {
      onDelete();
    }
  }


  function handleChange(e) {
      const newValue = e.target.value;
      setInputValue(newValue);

      if (newValue === '') {
        return;
      }

      const numericValue = Number(newValue);
      if (!isNaN(numericValue)) {
        if (numericValue < 1) {
          confirmAndDelete();
        } else {
          onQuantityChange(itemId, numericValue);
        }
      }
    }

    function handleBlur() {
        if (inputValue === '' || isNaN(Number(inputValue))) {
          setInputValue(quantity.toString());
        }
      }

  function addItem() {
    onQuantityChange(itemId, quantity + 1);
  }

  function subtractItem() {
    if (quantity > 1) {
      onQuantityChange(itemId, quantity - 1);
    } else {
      confirmAndDelete();
    }
  }

  return (
    <div
      className="d-flex justify-content-between align-items-center bg-light p-2 rounded w-100 py-1"
      style={{ maxWidth: "100%" }}
    >
      <button
        className="btn btn-outline-primary btn-sm"
        type="button"
        onClick={subtractItem}
      >
        <span aria-hidden="true">-</span>
      </button>
      <input
         type="number"
         className="form-control form-control-sm text-center mx-2"
         style={{ width: "60px" }}
         onChange={handleChange}
         onBlur={handleBlur}
         value={inputValue}
       />
      <button
        className="btn btn-outline-primary btn-sm"
        type="button"
        onClick={addItem}
      >
        <span aria-hidden="true">+</span>
      </button>
    </div>
  );
}

function Card({name, price, rating, item, onAdd, onDelete, quantity, onQuantityChange}) {
  const showBar = quantity>0;

  return (
    <div className="col">
      <div className="card">
        <div className="card-body">
          <h5 className="card-title">{name}</h5>
          <Rating rating={rating}/>
          <h5 className="card-title">{price} PLN </h5>
          <div className="d-grid gap-2">
          {showBar ? (
            <CounterNav
              itemId={item.id}
              quantity={quantity}
              onQuantityChange={onQuantityChange}
              onDelete={onDelete}
            />
          ) : (
            <button
              onClick={onAdd}
              type="button"
              className="btn btn-success"
            >
              Add
            </button>
          )}
          </div>
        </div>
      </div>
    </div>
  )
}

function CardShort({name, price, item, onDelete, quantity, onQuantityChange, onSelect, isSelected}) {

  const totalPrice = price * quantity;

  return (
    <div className="card w-100 mb-3">
      <div className="card-body">
        <div className="d-flex">
          <div className="form-check">
            <input
              className="form-check-input"
              type="checkbox"
              checked={isSelected}
              onChange={onSelect}
            />
          </div>
          <button
            type="button"
            className="btn-close ms-auto"
            aria-label="Close"
            onClick={onDelete}
          ></button>
        </div>
        <h5 className="card-title">{name}</h5>
        <h5 className="card-title">{totalPrice} PLN </h5>
        <CounterNav
          itemId={item.id}
          quantity={quantity}
          onQuantityChange={onQuantityChange}
          onDelete={onDelete}
        />
      </div>
    </div>
  )
}

function ItemList({items, cartItems, quantities, onAddItem, onDeleteItem, onQuantityChange}) {
  return (
    <div className="col-10">
      <div className="row row-cols-1 row-cols-md-5 g-4 p-3 border bg-light">
        {items.map((item) => (
          <Card
            key={item.id}
            name={item.name}
            price={item.price}
            rating={item.rating}
            item={item}
            quantity={quantities[item.id] || 0}
            onAdd={() => onAddItem(item)}
            onDelete={() => onDeleteItem(item)}
            onQuantityChange={onQuantityChange}
          />
        ))}
      </div>
    </div>
  )
}

function Cart({items, quantities, onDeleteItem, onQuantityChange, onSelectItem, selectedItems, onSelectAll}) {

 const allSelected = items.length > 0 && items.every(item => selectedItems.includes(item.id));

  return (
    <div className="col-2">
      <div className="p-3 border bg-light">
        <p className="text-center"><strong>99,99</strong></p>
        <div className="d-grid gap-2">
          <button type="button" className="btn btn-success">Go to checkout</button>
        </div>
        <div className="d-grid gap-2 mt-2">
          <button type="button" className="btn btn-primary">Go to cart</button>
        </div>
        <div className="form-check">
          <input
            className="form-check-input"
            type="checkbox"
            checked={allSelected}
            onChange={() => onSelectAll(!allSelected)}
          />
          <label className="form-check-label" htmlFor="flexCheckDefault">
            Select all
          </label>
        </div>
        <div className="d-flex flex-column align-items-center">
          {items.map((item) => (
            <CardShort
              key={item.id}
              name={item.name}
              price={item.price}
              item={item}
              quantity={quantities[item.id] || 1}
              onSelect={() => onSelectItem(item)}
              isSelected={selectedItems.includes(item.id)}
              onQuantityChange={onQuantityChange}
              onDelete={() => onDeleteItem(item)}
            />
          ))}
        </div>
      </div>
    </div>
  )
}

function MyApp() {
  const items = [
    {id:1, name:'Dracula', price:20, rating:5},
    {id:2, name: 'Frankenstein', price: 35, rating:4},
    {id:3, name: 'Carmilla', price: 3, rating:4},
    {id:4, name: 'Vampire Hunter D', price: 36, rating:4.5},
    {id:5, name: 'Call of Ctulhu', price: 42, rating:4.2},
    {id:6, name: 'Interview with Vampire', price: 39, rating:4.3}
  ];

  const [cartItems, setCartItems] = useState([]);
  const [quantities, setQuantities] = useState({});
  const [selectedItems, setSelectedItems] = useState ([]);

  function addItem(item) {
    if (!cartItems.some((cartItem) => cartItem.id === item.id)) {
      setCartItems([...cartItems, item]);
      setQuantities(prev => ({...prev, [item.id]: 1}));
    }
  }

  function deleteItem(item) {
    setCartItems(cartItems.filter((cartItem) => cartItem.id !== item.id));
    setQuantities(prev => {
      const newQuantities = {...prev};
      delete newQuantities[item.id];
      return newQuantities;
    });
  }

  function updateQuantity(itemId, newQuantity) {
    setQuantities(prev => ({...prev, [itemId]: newQuantity}));
  }

  function selectItem(item) {
    setSelectedItems(prev => {
      if (prev.includes(item.id)) {
        return prev.filter(id => id !== item.id);
      }
      return [...prev, item.id];
    });
  }

  function handleSelectAll(selectAll) {
      if (selectAll) {
        setSelectedItems(cartItems.map(item => item.id));
      } else {
        setSelectedItems([]);
      }
    }

  return (
    <div className="row">
      <ItemList
        items={items}
        cartItems={cartItems}
        quantities={quantities}
        onAddItem={addItem}
        onDeleteItem={deleteItem}
        onQuantityChange={updateQuantity}
      />
      <Cart
        items={cartItems}
        selectedItems={selectedItems}
        onSelectItem = {selectItem}
        onSelectAll={handleSelectAll}
        quantities={quantities}
        onDeleteItem={deleteItem}
        onQuantityChange={updateQuantity}
      />
    </div>
  )
}

      const container = document.getElementById('root');
      const root = ReactDOM.createRoot(container);
      root.render(<MyApp />);

    </script>
  </body>
</html>
